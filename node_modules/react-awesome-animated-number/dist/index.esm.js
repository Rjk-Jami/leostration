import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { useState, useRef, useEffect, useMemo, Fragment } from 'react';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { jsx, jsxs } from 'react/jsx-runtime';

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var AnimatedNumberItem = function AnimatedNumberItem(_ref) {
  var number = _ref.number,
      size = _ref.size,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? 200 : _ref$duration,
      _ref$order = _ref.order,
      order = _ref$order === void 0 ? "asc" : _ref$order;

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      currentIndex = _useState2[0],
      setCurrentIndex = _useState2[1];

  var _useState3 = useState({}),
      _useState4 = _slicedToArray(_useState3, 2),
      transformStyle = _useState4[0],
      setTransformStyle = _useState4[1];

  var numberWrapperRef = useRef(null);
  useEffect(function () {
    setCurrentIndex(number);
  }, [number]);
  useEffect(function () {
    var $numberWrapper = numberWrapperRef.current;

    if ($numberWrapper) {
      requestAnimationFrame(function () {
        setTransformStyle({
          transform: "translateY(".concat(size * (order === "desc" ? 9 - currentIndex : currentIndex) * -1, "px)")
        });
      });
    }
  }, [currentIndex, size, order]);
  return /*#__PURE__*/jsx("div", {
    className: "AnimatedNumberItem",
    style: {
      height: size
    },
    children: /*#__PURE__*/jsx("div", {
      ref: numberWrapperRef,
      className: "AnimatedNumberItem__wrapper",
      style: _objectSpread$1({
        transitionDuration: "".concat(duration, "ms")
      }, transformStyle),
      children: Array.from({
        length: 10
      }).map(function (_, number) {
        return /*#__PURE__*/jsx("div", {
          className: "AnimatedNumberItem__number",
          style: {
            fontSize: size,
            height: size
          },
          children: order === "desc" ? 9 - number : number
        }, number);
      })
    })
  });
};

var AnimatedNumberItem$1 = AnimatedNumberItem;

var _excluded = ["value", "size", "hasComma", "duration", "style", "className", "order", "minDigits"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var AnimatedNumber = function AnimatedNumber(_ref) {
  var value = _ref.value,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 14 : _ref$size,
      _ref$hasComma = _ref.hasComma,
      hasComma = _ref$hasComma === void 0 ? false : _ref$hasComma,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? 200 : _ref$duration,
      style = _ref.style,
      className = _ref.className,
      _ref$order = _ref.order,
      order = _ref$order === void 0 ? "asc" : _ref$order,
      minDigits = _ref.minDigits,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var numberArray = useMemo(function () {
    var reversedNumberArray = String(value).split("").reverse();

    if (typeof minDigits === "number" && reversedNumberArray.length < minDigits) {
      var lackOfDigits = minDigits - reversedNumberArray.length;
      Array.from({
        length: lackOfDigits
      }).forEach(function () {
        reversedNumberArray.push("0");
      });
    }

    return reversedNumberArray;
  }, [value, minDigits]);
  var isMinus = useMemo(function () {
    return numberArray[numberArray.length - 1] === "-";
  }, [numberArray]);
  var decimalPointIndex = useMemo(function () {
    return numberArray.findIndex(function (value) {
      return value === ".";
    });
  }, [numberArray]);
  var decimalLength = useMemo(function () {
    return decimalPointIndex > -1 ? decimalPointIndex : 0;
  }, [numberArray, decimalPointIndex]);
  return /*#__PURE__*/jsx("div", _objectSpread(_objectSpread({
    className: className ? "ReactAwesomeAnimatedNumber ".concat(className) : "ReactAwesomeAnimatedNumber",
    style: _objectSpread(_objectSpread({}, style), {}, {
      height: size
    })
  }, restProps), {}, {
    children: numberArray.map(function (number, index) {
      var isInt = decimalLength ? index > decimalPointIndex : true;
      var intIndex = decimalLength ? index - decimalLength - 1 : index;
      var isCommaNeeded = hasComma && isInt && intIndex % 3 === 0 && intIndex !== 0 && (isMinus ? index !== numberArray.length - 1 : true);
      return /*#__PURE__*/jsxs(Fragment, {
        children: [isCommaNeeded && /*#__PURE__*/jsx("div", {
          className: "ReactAwesomeAnimatedNumber__text",
          style: {
            fontSize: size,
            height: size
          },
          children: ","
        }), isNaN(Number(number)) ? /*#__PURE__*/jsx("div", {
          className: "ReactAwesomeAnimatedNumber__text",
          style: {
            fontSize: size,
            height: size
          },
          children: number
        }) : /*#__PURE__*/jsx(AnimatedNumberItem$1, {
          number: Number(number),
          size: size,
          duration: duration,
          order: order
        })]
      }, index);
    })
  }));
};

var AnimatedNumber$1 = AnimatedNumber;

export { AnimatedNumber$1 as default };
//# sourceMappingURL=index.esm.js.map
